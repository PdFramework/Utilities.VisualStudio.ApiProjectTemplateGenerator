// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace $customnamespace$.IntegrationTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class Get$specificconcept$Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Get$specificconcept$.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get$specificconcept$", "\tIn order to interact with $humanizedspecificconcept$\r\n\tAs a business owner\r\n\tI want to " +
                    "be able to get all of the $humanizedspecificconcept$", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Get$specificconcept$")))
            {
                $customnamespace$.IntegrationTests.Get$specificconcept$Feature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get all $humanizedspecificconcept$")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Get$specificconcept$")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Get$specificconcept$")]
        public virtual void GetAll$specificconcept$()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all $humanizedspecificconcept$", new string[] {
                        "Get$specificconcept$"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartDateTimeOffset",
                        "StopDateTimeOffset"});
            table1.AddRow(new string[] {
                        "01/01/2016",
                        "12/31/2016"});
            table1.AddRow(new string[] {
                        "12/31/2015",
                        "12/30/2016"});
#line 8
 testRunner.Given("the following $humanizedspecificconcept$", ((string)(null)), table1, "Given ");
#line 12
 testRunner.When("GET is invoked on the $humanizedspecificconcept$ api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the $humanizedspecificconcept$ should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Get a $humanizedspecificconceptsingularized$ by id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Get$specificconcept$")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Get$specificconcept$")]
        public virtual void GetA$specificconceptsingularized$ById()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get a $humanizedspecificconceptsingularized$ by id", new string[] {
                        "Get$specificconcept$"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "StartDateTimeOffset",
                        "StopDateTimeOffset"});
            table2.AddRow(new string[] {
                        "01/01/2016",
                        "12/31/2016"});
#line 17
 testRunner.Given("the following $humanizedspecificconcept$", ((string)(null)), table2, "Given ");
#line 20
 testRunner.When("GET is invoked on the $humanizedspecificconcept$ api with a specified id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 21
 testRunner.Then("the $humanizedspecificconceptsingularized$ should be returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Attempt to get a $humanizedspecificconceptsingularized$ with an invalid id")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Get$specificconcept$")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Get$specificconcept$")]
        public virtual void AttemptToGetA$specificconceptsingularized$WithAnInvalidId()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attempt to get a $humanizedspecificconceptsingularized$ with an invalid id", new string[] {
                        "Get$specificconcept$"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("the following invalid $humanizedspecificconceptsingularized$ id -1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When("GET is invoked on the $humanizedspecificconcept$ api with a specified id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("the exception message should contain the status code 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
